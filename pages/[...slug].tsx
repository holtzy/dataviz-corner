import { Post } from "utils/types";
import { slugify } from "utils/slugify";
import sanitizeHtml from "sanitize-html";
import Contact from "components/Contact";
import Footer from "components/Footer";
import Navbar from "components/Navbar";
import Head from "next/head";
import fsPromises from "fs/promises";
import path from "path";

//
//
// the params argument comes from the getStaticPaths function. It's the detail of the url we are currently working on
// Basically, the slug of the pos
//
//
export async function getStaticProps({ params }: any) {
  // Read the JSON file that contains all the posts
  const filePath = path.join(process.cwd(), "data/data-full.json");
  const jsonData = await fsPromises.readFile(filePath);
  const posts: Post[] = JSON.parse(jsonData);

  // Find the specific post that corresponds to the ongoing slug
  // This post blob is magically send to the PostRenderer component
  const post = posts.find((post) => slugify(post.title) === params.slug[0]) || { notfound: true };

  // This object is available from the renderer
  return { props: { post } };
}

//
//
// Create the list of post to create a build time based on the full data JSON
//
//
export async function getStaticPaths() {
  // Read the JSON file that contains all the posts
  const filePath = path.join(process.cwd(), "data/data-full.json");
  const jsonData = await fsPromises.readFile(filePath);
  const posts: Post[] = JSON.parse(jsonData);

  const paths = posts.map((post) => {
    const slug = slugify(post.title);
    return { params: { slug: [slug] } };
  });

  return { paths, fallback: true };
}

//
//
// Render the post based on the JSON item
//
//
type PostRendererProps = {
  post: Post;
};
export default function PostRenderer({ post }: PostRendererProps) {
  if (!post?.creator || !!post?.title || !post?.content) {
    return null;
  }

  const cleanHTML = sanitizeHtml(post.content, {
    allowedTags: sanitizeHtml.defaults.allowedTags.concat(["img"]),
    allowedAttributes: {
      a: ["href"],
    },
    allowedIframeHostnames: ["www.youtube.com"],
  });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="wrapper">
        <Navbar />
      </div>

      <div className="wrapperNarrow">
        <h1>{post.title}</h1>
        {post.creator}
        <br />
        <div dangerouslySetInnerHTML={{ __html: cleanHTML }}></div>
      </div>

      <Contact />
      <div className="wrapper">
        <Footer />
      </div>
    </>
  );
}
