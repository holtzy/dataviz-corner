{"pageProps":{"post":{"title":"I wrote some code that automatically checks visualizations for non-colorblind safe colors. Here's how it works\n","link":"https://vis4.net/blog/2018/02/automate-colorblind-checking/","pubDate":"2018-02-08T14:09:30.000Z","content":"<p>Earlier this week we released a new feature at Datawrapper that <a href=\"https://blog.datawrapper.de/colorblind-check/\" target=\"_blank\" rel=\"noopener\"><strong>checks colors</strong> used in charts or maps <strong>for problems with colorblind readers</strong></a>. If problematic colors are found, a warning sign is shown that leads to a colorblind simulation view that helps our users find better colors.</p><p>This blog post explains how the code works. Perhaps this can open a discussion for future improvement. I also hope that other tools will follow Darawrapper on this path towards more automated accessibility testing.</p><p>To see how the algorithm work we’ll look at an example map showing population growth in the US between 2000 and 2010, based on <a href=\"https://www.texastribune.org/2011/03/25/maps-visualize-us-population-growth-by-county/\" target=\"_blank\" rel=\"noopener\">this map made by Matt Stiles</a> in 2011:</p><div class=\"us-map poster poster-945\" style=\"position: relative;\"></div><input type=\"color\" class=\"map-gradient\" value=\"#E52000\"><input type=\"color\" class=\"map-gradient\" value=\"#FFF2C3\"><input type=\"color\" class=\"map-gradient\" value=\"#eeeeee\"><input type=\"color\" class=\"map-gradient\" value=\"#DEE6D0\"><input type=\"color\" class=\"map-gradient\" value=\"#03934C\"><script type=\"text/javascript\">function makeMap() {    var base = \"/blog/interactives/usmap/\";    d3.loadData(base+'us-counties-10m.json', base+\"popchange.csv\", function(error, res) {        var sel = d3.select('.us-map').html(''),            pad = 10,            margin = {top:0,bottom:0,left:pad,right:pad},            totalWidth = sel.node().clientWidth,            totalHeight = totalWidth * 0.6;        var c = d3.conventions({sel, margin, totalWidth, totalHeight}),            [svg] = c.layers,            proj = d3.geoIdentity(),            path = d3.geoPath().projection(proj);        // read colors from inputs        var colors = [];        d3.selectAll('.map-gradient').each(function() {            colors.push(d3.select(this).prop('value'));        });        var scale = chroma            .scale(colors)            .domain([-50,-1,0,1,60]).out('hex');        var colors = d3.set();        // load data        if (error) throw error;        var [us, popchange] = res;        var popchange = d3.nest()            .key(d3.f('FIPS'))            .rollup(d3.f(0))            .object(popchange);        var nation = topojson.feature(us, us.objects.nation),            counties = topojson.feature(us, us.objects.counties).features;        proj.fitSize([totalWidth-pad*2, totalHeight], nation);        svg.append('g.counties')            .appendMany('path', counties)            .attr('d', path)            .style('fill', function(cty) {                var d = popchange[cty.id] || {},                    col = scale(+d.popchange||0);                colors.add(col);                return col;            });        svg.append(\"path\")            .st({fill:'none', stroke:'white'})            .attr(\"d\", path(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; })));        svg.append(\"path\")            .st({fill:'none',stroke:'black'})            .attr(\"d\", path(nation));        // run the rest of the demos        updateColors(colors);    });}function deltaE(col1, col2) {    return 0.5*(chroma.deltaE(col1,col2)+chroma.deltaE(col2,col1));}d3.selectAll('.map-gradient').on('change', makeMap);</script><p>So here’s what we’re going to do</p><ol><li>We need to extract a representative color sample</li><li>Then look for color-pairs that are distinguishable under normal vision and</li><li>check if any of them turn indistinguishable in a color blindness simulated view</li><li>Finally we need to decide whether or not to show a warning.</li></ol><h2 id=\"extracting-a-representative-color-sample\"><a class=\"anchor\" href=\"#extracting-a-representative-color-sample\"><span class=\"header-anchor\">#</span></a> Extracting a representative color sample</h2><p>Now, to check if this map is colorblind-friendly or not, we need to look at the colors used in it. In some graphics there might be just a handful of colors, but since this is a continuous US county choropleth map, we have a lot of them (<strong><span class=\"num-colors\">TK</span></strong>, to be exact).</p><div class=\"all-colors colors\"></div><p>Since the next step will involve checking each combination of these colors, it would result in a lot of permutations (<strong><span class=\"num-pairs\">TK</span></strong>, to be exact). So in order to save some work we need to reduce the number of colors.</p><p>My first approach was to use <strong>random sampling</strong>. To illustrate this, let’s look at 20 random colors from the palette above:</p><div class=\"random-colors colors large\"></div><p>This might look like a nice sample at first glance, but due to the is random sampling we might end up with more colors from either spectrum of the palette. Click the button below to try a few more samples.</p><p><button class=\"resample-random\">Repeat random sampling</button></p><p>To get around this problem I tried to find a more deterministic sampling method that gives us a representative collection of colors. Since color blindness affects hue perception I thought it made sense to get a good sample of the entire hue-spectrum. So I sorted all colors by hue…</p><div class=\"all-colors-sorted colors\"></div><p>…and then pick 20 evenly spaced colors along this spectrum. Like taking a sample every 5th percentile. To deal with interpolation (in case a percentile falls exactly between two colors) I used the <a href=\"https://gka.github.io/chroma.js/#scale-colors\" target=\"_blank\" rel=\"noopener\">scale.colors()</a> method in chroma.js.</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sample = chroma.scale(sorted_colors).colors(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure><p>And this is what the sample looks like:</p><div class=\"hue-sample colors large\"></div><script type=\"text/javascript\">function updateColors(colors) {    d3.select('.all-colors').html('')        .appendMany('div.color', colors.values())        .st('background', d3.f());    var numColors = colors.size();    // update color counts    d3.select('.num-colors').text(numColors);    d3.select('.num-pairs').text(d3.format(',')((numColors * (numColors-1))/2));    // update random sample    randomSample();    hueSample();    d3.select('.resample-random').on('click', randomSample);    // random sampling    function randomSample() {        var sample = _.sample(colors.values(), 20);;        d3.select('.random-colors').html('')            .appendMany('div.color', sample)            .st('background', d3.f());    }    // hue sorted percentiles    function hueSample() {        var sorted = colors.values().sort(d3.ascendingKey(function(col) {            return chroma(col).get('lch.h') || 1000;        }));        // show all sorted colors        d3.select('.all-colors-sorted').html('')            .appendMany('div.color', sorted)            .attr('title', function(c) { return chroma(c).get('lch.h'); })            .st('background', d3.f());        // show sample        var sample = chroma.scale(sorted).colors(20);        d3.select('.hue-sample').html('')            .appendMany('div.color', sample)            .st('background', d3.f())            .attr('title', function(c) { return chroma(c).get('lch.h'); });        // compute distance matrix        colorDistanceMatrix('.cdm-normal', sample);        cbsimTable(sample);    }}</script><p>We could experiment with other sampling methods, but for now these look good enough, so let’s move on. Next we want to find out which of the resulting <strong>190</strong> color pairs are actually distinguishable from another. To do that we need to find a method to compute differences between colors.</p><h2 id=\"how-to-compute-color-differences\"><a class=\"anchor\" href=\"#how-to-compute-color-differences\"><span class=\"header-anchor\">#</span></a> How to compute color differences</h2><p>There are a couple of ways to do this. For instance, a color can be represented as three-dimensional coordinates in a <span style=\"color:red\">R</span>-<span style=\"color:#0c0\">G</span>-<span style=\"color:blue\">B</span> color space, so the color difference can be defined as the Euclidean distance between the two points.</p><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>R</mi><mi>G</mi><mi>B</mi></mrow></msub><mo>=</mo><msqrt><mrow><mo>(</mo><msub><mi>R</mi><mn>2</mn></msub><mo>−</mo><msub><mi>R</mi><mn>1</mn></msub><msup><mo>)</mo><mrow><mn>2</mn></mrow></msup><mo>+</mo><mo>(</mo><msub><mi>G</mi><mn>2</mn></msub><mo>−</mo><msub><mi>G</mi><mn>1</mn></msub><msup><mo>)</mo><mrow><mn>2</mn></mrow></msup><mo>+</mo><mo>(</mo><msub><mi>B</mi><mn>2</mn></msub><mo>−</mo><msub><mi>B</mi><mn>1</mn></msub><msup><mo>)</mo><mrow><mn>2</mn></mrow></msup></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">dist_{RGB}=\\sqrt{(R_2-R_1)^{2} + (G_2-G_1)^{2} + (B_2-B_1)^{2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.9838800000000001em;\"></span><span class=\"strut bottom\" style=\"height:1.24001em;vertical-align:-0.2561299999999999em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord\"><span class=\"mord mathit\">t</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathit\">G</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"sqrt mord\"><span class=\"sqrt-sign\" style=\"top:-0.09388000000000007em;\"><span class=\"style-wrap reset-textstyle textstyle uncramped\"><span class=\"delimsizing size1\">√</span></span></span><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.00773em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">−</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.00773em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"vlist\"><span style=\"top:-0.289em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">G</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">−</span><span class=\"mord\"><span class=\"mord mathit\">G</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"vlist\"><span style=\"top:-0.289em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.05017em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">−</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.05017em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"vlist\"><span style=\"top:-0.289em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span><span style=\"top:-0.90388em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped sqrt-line\"></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">​</span></span>​</span></span></span></span></span></span></span></p><p>However, after playing around with RGB distances a bit I noticed a problem: Look at the yellow/green and pink/blue combinations below. From eyeballing the colors I had expected the distance between yellow and green to be smaller than the pink/blue combination.</p><div class=\"colors xlarge\">    <div class=\"color\" style=\"background: #ff0\"></div><div class=\"color\" style=\"background: #0f0\"></div></div> vs <div class=\"colors xlarge\">    <div class=\"color\" style=\"background: #f0f\"></div><div class=\"color\" style=\"background: #00f\"></div></div><p>But it turns out, in RGB the distance is exactly 255 in both cases. This makes sense mathematically, since it takes 255 “steps” from <span style=\"border-bottom:2px solid rgb(255,255,0)\">(255,255,0)</span> to <span style=\"border-bottom:2px solid rgb(0,255,0)\">(0,255,0)</span> as well as from <span style=\"border-bottom:2px solid rgb(255,0,255)\">(255,0,255)</span> to <span style=\"border-bottom:2px solid rgb(0,0,255)\">(0,0,255)</span>. But it doesn’t make sense visually.</p><p>Of course, the same Euclidean distances can be computed in any other color space, so perhaps a perceptual color space like <code>Lab</code> or <code>Lch</code> makes more sense. Sadly, that’s not the case.</p><table style=\"max-width: 350px\">    <tr><th></th><th>RGB</th><th>Lch</th><th>Lab</th><th>deltaE</th></tr>    <tr>        <td><div class=\"colors xlarge\">        <div class=\"color\" style=\"background: #ff0\"></div><div class=\"color\" style=\"background: #0f0\"></div></div></td>        <td>255</td><td>41.4</td><td>66.3</td><td>26.9</td>    </tr>    <tr>        <td><div class=\"colors xlarge\">        <div class=\"color\" style=\"background: #f0f\"></div><div class=\"color\" style=\"background: #00f\"></div></div></td>        <td>255</td><td>40.0</td><td>58.0</td><td>34.7</td>    </tr></table><p>In Lch, like RGB, both color pairs are almost equally distant. In Lab, the distance between yellow and green is even larger (66.3) than pink/blue (58.0).</p><p>So I ended up using a more fancy algorithm called <a href=\"https://en.wikipedia.org/wiki/Color_difference#CMC_l:c_.281984.29\" target=\"_blank\" rel=\"noopener\"><strong>deltaE</strong> or CMC l:c</a>. It’s based on the Lch color model, but appears to work better.</p><p>One minor problem with deltaE is that it’s not symmetrical, meaning that the difference between yellow and green differs slightly from the difference between green and yellow. To get around this problem I am using the mean of the distances in both direction:</p><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo>(</mo><msub><mi>c</mi><mrow><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mrow><mn>2</mn></mrow></msub><mo>)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mi>E</mi><mo>(</mo><msub><mi>c</mi><mrow><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mrow><mn>2</mn></mrow></msub><mo>)</mo><mo>+</mo><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mi>E</mi><mo>(</mo><msub><mi>c</mi><mrow><mn>2</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mrow><mn>1</mn></mrow></msub><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">dist(c_{1},c_{2})=\\frac{deltaE(c_{1}, c_{2}) + deltaE(c_{2}, c_{1})}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.427em;\"></span><span class=\"strut bottom\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord mathit\">t</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathrm\">2</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mbin\">+</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p><p>Now let’s move from the difference between two colors to the difference between <em>all</em> the colors!</p><h2 id=\"compute-the-color-distance-matrix\"><a class=\"anchor\" href=\"#compute-the-color-distance-matrix\"><span class=\"header-anchor\">#</span></a> Compute the color distance matrix</h2><p>To do that we compute the color distance matrix. Which is a fancy word for a table with rows and columns for each of our sample colors, and the distance between each color combination shown in the table cells.</p><table class=\"color-distance-matrix cdm-normal\"></table><script type=\"text/javascript\">function colorDistanceMatrix(cont, sample, baseline) {    var hm = chroma.scale(['#eee','#ddd', '#666']).domain(baseline ? [1,3,10] :[0,10,70]).out('hex');    var table = d3.select(cont).html('');    var tr = table.append('tr');    if (baseline) {        tr.append('td');        tr.append('td');        tr.appendMany('th.color', baseline).st('background', d3.f());        tr = table.append('tr');        tr.append('td');    }    tr.append('td');    tr.appendMany('th.color', sample).st('background', d3.f());    tr = table.appendMany('tr', sample);    if (baseline) {        tr.append('th.color').st('background', (d,i) => baseline[i]);    }    tr.append('th.color').st('background', d3.f());    tr.appendMany('td', function(a, ia) {            return sample.map(function(b, ib) {                var diff = deltaE(a,b);                return {                    a, ia, b, ib,                    diff: baseline ?                        // difference ratio                        (deltaE(baseline[ia],baseline[ib])/diff).toFixed(1)                        : diff.toFixed(0)                };            });        })        .style('background-color', d3.f('diff', hm))        .text(d3.f('diff'))        .classed('relevant', (d) => d.ib > d.ia && d.diff >= (baseline ? 2 : 8))        .classed('strong', (d) => d.diff >= (baseline ? 5 : 40))        .classed('lower', (d) => d.ib <= d.ia);}</script><p>We only need to look at the upper half of the matrix – the lower half is just an exact mirror. I highlighted all values above 45 so the combinations with the largest color differences pop out a bit more.</p><p>Now we need to compute the same matrix with the colorblind-simulated versions of our colors.</p><h2 id=\"simulating-color-blindness\"><a class=\"anchor\" href=\"#simulating-color-blindness\"><span class=\"header-anchor\">#</span></a> Simulating color blindness</h2><p>Color blindness simulation is done by mapping colors from RGB to a reduced color space. It means that you have a function that gets one color as input and returns a new color.</p><p>After googling around a bit I settled on a NPM package <a href=\"https://www.npmjs.com/package/color-blind\" target=\"_blank\" rel=\"noopener\">color-blind</a>, which provides a fairly simple API:</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blinder = <span class=\"built_in\">require</span>(<span class=\"string\">'color-blind'</span>);</span><br><span class=\"line\">blinder.protanopia(<span class=\"string\">'#42dead'</span>); <span class=\"comment\">// result: \"#d1c4a0\"</span></span><br></pre></td></tr></table></figure><p>Here is our color sample mapped through three kinds of color blindness:</p><table class=\"simulated\"></table><script type=\"text/javascript\">function cbsimTable(sample) {    var table = d3.select('.simulated').html('');    var tr = table.appendMany('tr', ['normal','deuteranopia','protanopia','tritanopia']);    tr.append('td').append('b').text(d3.f());    var div = tr.append('td').append('div.colors.large');    div.appendMany('div.color', function(t) {            return t == 'normal' ? sample :                sample.map(function(c) { return blinder[t](c); })        })        .style('background', d3.f());    simColorMatrix(sample);    simColorRatioMatrix(sample);    summaryTable(sample);}</script><p>Now we can just repeat the color difference matrix for the converted sample colors:</p><table class=\"color-distance-matrix cdm-sim\"></table><p>You can click through the buttons below to see the color difference matrix for each color blindness simulation:</p><div class=\"btn-group select-simulation\">    <button>normal</button>    <button class=\"selected\">deuteranopia</button>    <button>protanopia</button>    <button>tritanopia</button></div><script type=\"text/javascript\">function simColorMatrix(sample) {    var btns = d3.selectAll('.select-simulation button'),        typ = d3.select('.select-simulation button.selected').text();    btns.on('click.vis4', function() {        btns.classed('selected', false);        d3.select(this).classed('selected', true);        simColorMatrix(sample);    });    var colors = typ == 'normal' ? sample :        sample.map(function(c) { return blinder[typ](c); });    colorDistanceMatrix('.cdm-sim', colors);}</script><h2 id=\"computing-difference-ratios-between-normal-and-colorblind-vision\"><a class=\"anchor\" href=\"#computing-difference-ratios-between-normal-and-colorblind-vision\"><span class=\"header-anchor\">#</span></a> Computing difference ratios between normal and colorblind vision</h2><p>We’re getting closer to the finish line! The only thing that’s left to do now is to <strong>compare the differences</strong> under normal vision with the differences under a color blindness simulation.</p><p>One way to do this is to look at the ratio between the two differences:</p><p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mo>(</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi></mrow></msub><mo>(</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>)</mo></mrow><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>c</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>r</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi></mrow></msub><mo>(</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">ratio(c_1,c_2)=\\frac{dist_{normal}(c_1,c_2)}{dist_{colorblind}(c_1,c_2)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.427em;\"></span><span class=\"strut bottom\" style=\"height:2.363em;vertical-align:-0.936em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">o</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord\"><span class=\"mord mathit\">t</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">c</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">b</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">n</span><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span><span style=\"top:-0.2300000000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord\"><span class=\"mord mathit\">t</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">m</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">c</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p><p>To illustrate the ratio, let’s look at the notorious <span style=\"border-bottom:2px solid #54ae49\">green</span>/<span style=\"border-bottom:2px solid #f06c62\">red</span> color pair and compute the differences between them after applying different colorblindness simulations.</p><table class=\"color-ratios\"></table><script type=\"text/javascript\">function colorRatios(col1, col2) {    var table = d3.select('.color-ratios').html('');    var modes = ['normal','deuteranopia','protanopia','tritanopia'];    table.append('tr').appendMany('th', [''].concat(modes)).text(d3.f());    var dist_norm = deltaE(col1,col2);    var columns = modes.map(function(mode) {        var c1 = mode == 'normal' ? col1 : blinder[mode](col1);        var c2 = mode == 'normal' ? col2 : blinder[mode](col2);        var dist = deltaE(c1,c2);        return {            mode: mode,            colors: [c1,c2],            distance: dist,            ratio: dist_norm.toFixed()+'/'+dist.toFixed()+' = <b>'+ (dist_norm / dist).toFixed(1)+'</b>'        };    });    // colors    var tr = table.append('tr');    tr.append('td').text('Colors');    tr.appendMany('td.color', columns)        .append('div.colors.xlarge')        .appendMany('div.color', (col) => col.colors)        .style('background', d3.f());    // distance    tr = table.append('tr');    tr.append('td').text('Distance');    tr.appendMany('td', columns)        .text((col) => col.distance.toFixed(0));    // ratio    tr = table.append('tr');    tr.append('td').text('Ratio').style('font-weight','bold');    tr.appendMany('td', columns)        .html((col) => col.ratio);}colorRatios('#54ae49', '#f06c62');</script><p>A ratio of 17.3 means that a color pair is <strong>seventeen times more differentiable</strong> under normal vision than under this type of color blindness. The higher the ratio the more information is “lost” for a colorblind person. This is what we’ll use to decide what colors are ok or not.</p><p>Now, to <strong>look at all the ratios at once</strong>, let’s make another matrix. The table looks just like the matrices we’ve seen before, except now the values in the cells show the ratio between the normal distance and the colorblind distance for each color pair.</p><table class=\"color-distance-matrix cdm-sim-ratios\"></table><div class=\"btn-group select-simulation2\">    <button>normal</button>    <button>deuteranopia</button>    <button class=\"selected\">protanopia</button>    <button>tritanopia</button></div><script type=\"text/javascript\">function simColorRatioMatrix(sample) {    var btns = d3.selectAll('.select-simulation2 button'),        typ = d3.select('.select-simulation2 button.selected').text();    btns.on('click.vis4', function() {        btns.classed('selected', false);        d3.select(this).classed('selected', true);        simColorRatioMatrix(sample);    });    var colors = typ == 'normal' ? sample :        sample.map(function(c) { return blinder[typ](c); });    colorDistanceMatrix('.cdm-sim-ratios', colors, sample);}</script><p>You can use the buttons to cycle through the different simulations.</p><p>All that’s left to do now is to decide when to show a warning.</p><h2 id=\"when-to-show-a-color-warning\"><a class=\"anchor\" href=\"#when-to-show-a-color-warning\"><span class=\"header-anchor\">#</span></a> When to show a color warning</h2><p>One criteria to check for I came up with is to check how many of the color pairs that were differentiable under normal vision turn into non-differentiable color pairs under colorblind vision. I also found that difference ratios above five signal a significant loss of information. So I ended up using a mix of both to decide when to trigger warnings.</p><p>As you can see in the table, it all depends highly on where I set the thresholds. You can tweak the sliders below to change them and see the results changing.</p><table class=\"summary\"></table><div class=\"summary-ctrls\">    <label>Difference threshold: <b class=\"diff-thresh\"></b><br><input class=\"diff-input\" type=\"range\" value=\"5\" min=\"4\" max=\"20\" step=\"0.1\"></label>    <label>Ratio threshold: <b class=\"ratio-thresh\"></b><br><input class=\"ratio-input\" type=\"range\" value=\"5\" min=\"1\" max=\"10\" step=\"0.1\"></label>    <label>Warning threshold: <b class=\"warning-thresh\"></b>%<br><input class=\"warning-input\" type=\"range\" value=\"4\" min=\"0.1\" max=\"40\" step=\"0.1\"></label></div><script type=\"text/javascript\">    function summaryTable(colors) {        d3.selectAll('.summary-ctrls input').on('input', function() {            summaryTable(colors);        });        var ratio_thresh = +d3.select('.ratio-input').prop('value');        var diff_thresh = +d3.select('.diff-input').prop('value');        var warning_thresh = +d3.select('.warning-input').prop('value');        console.log('rrr', ratio_thresh, ratio_thresh.toFixed(1));        d3.select('.ratio-thresh').html(ratio_thresh.toFixed(1));        d3.select('.diff-thresh').html(diff_thresh.toFixed(1));        d3.select('.warning-thresh').html(warning_thresh.toFixed(1));        var table = d3.select('.summary').html('');        var modes = ['normal', 'deuteranopia','protanopia','tritanopia'];        table.append('tr').appendMany('th', [''].concat(modes)).text(d3.f());        var num_colors = colors.length,            num_perm = (colors.length*(colors.length-1))/2;        // var dist_ratio = (chroma.deltaE(col1,col2)+chroma.deltaE(col2,col1))*0.5;        var columns = modes.map(function(mode) {            // var c1 = mode == 'normal' ? col1 : blinder[mode](col1);            // var c2 = mode == 'normal' ? col2 : blinder[mode](col2);            // var dist = (chroma.deltaE(c1,c2)+chroma.deltaE(c2,c1))*0.5;            var diff_colors = 0,                cnt_ratio = 0,                cnt_sim_diff = 0,                max_ratio = 0,                sum_ratio = 0;            colors.forEach((col_a, i) => {                colors.forEach((col_b, j) => {                    if (j>i) {                        var dist_norm = deltaE(col_a, col_b);                        if (dist_norm >= diff_thresh) {                            diff_colors++;                            if (mode != 'normal') {                                var sim_a = blinder[mode](col_a),                                    sim_b = blinder[mode](col_b);                                var dist_sim = deltaE(sim_a, sim_b);                                if (dist_sim < diff_thresh) {                                    cnt_sim_diff++;                                }                                var ratio = dist_norm / dist_sim;                                sum_ratio+= ratio;                                if (ratio > max_ratio) max_ratio = ratio;                                if (ratio >= ratio_thresh) cnt_ratio++;                            }                        }                    }                });            });            var ratio_pct = 100*(cnt_ratio/diff_colors);            var diff_pct = 100*(cnt_sim_diff/diff_colors);            return {                mode: mode,                colors: mode == 'normal' ? num_colors : '-',                permutations: mode == 'normal' ? num_perm : '-',                differentiable: mode == 'normal' ? diff_colors : '-',                sim_not_diff: mode == 'normal' ? '' : cnt_sim_diff + ' ('+diff_pct.toFixed(1)+'%)',                ratio: mode == 'normal' ? '' : cnt_ratio+' ('+ratio_pct.toFixed(1)+'%)',                ratio_avg: mode == 'normal' ? '' : (sum_ratio / diff_colors).toFixed(1),                ratio_max: mode == 'normal' ? '' : (max_ratio).toFixed(1),                warning: mode== 'normal' ? '' : ratio_pct >= warning_thresh || diff_pct > warning_thresh ? '<b>WARNING</b>' : 'ok'                // colors: [c1,c2],                // distance: dist,                // ratio: dist_norm / dist            };        });        // number of colors        var tr = table.append('tr');        tr.append('td').text('Colors');        tr.appendMany('td', columns).text(d3.f('colors'));        // number of color permutations        tr = table.append('tr');        tr.append('td').text('Color pairs');        tr.appendMany('td', columns).text(d3.f('permutations'));        // of those, differentiable        tr = table.append('tr');        tr.append('td').html('Differentiable color pairs');        tr.appendMany('td', columns).text(d3.f('differentiable'));        // hr        // tr = table.append('tr');        // tr.append('td').attr('colspan', 4)        //     .st({textAlign:'center', color: '#999'})        //     .text('of those...');        // non differentiable        tr = table.append('tr');        tr.append('td').html('..that turn into non-differentiable<br>pairs under colorblind simulation');        tr.appendMany('td', columns).text(d3.f('sim_not_diff'));        // of those, differentiable        // tr = table.append('tr');        // tr.append('td').text('Avg. ratio');        // tr.appendMany('td', columns).text(d3.f('ratio_avg'));        // // of those, differentiable        // tr = table.append('tr');        // tr.append('td').text('Max. ratio');        // tr.appendMany('td', columns).text(d3.f('ratio_max'));        // of those, differentiable        tr = table.append('tr');        tr.append('td').text('Ratio > '+(ratio_thresh.toFixed(1)));        tr.appendMany('td', columns).text(d3.f('ratio'));        // of those, differentiable        tr = table.append('tr');        tr.append('td').text('Result');        tr.appendMany('td', columns).html(d3.f('warning'));        // of those, differentiable    }</script><p>Feel free to scroll back to the top and try out different colors in the map. All the examples and matrices in this post will change accordingly. Let me know if you find bugs along the way.</p><h2 id=\"some-ideas-for-future-improvements\"><a class=\"anchor\" href=\"#some-ideas-for-future-improvements\"><span class=\"header-anchor\">#</span></a> Some ideas for future improvements</h2><p>This algorithm was hacked together in a few days, so obviously there are possible improvements to be made. Here are a few ideas that might be worth exploring:</p><ul><li>Instead of the hue-percentiles we could try different methods to find the most “representative” colors, such as k-means clustering.</li><li>One could look out for different color difference metrics, ideally by having (non-colorblind) people “guess” color differences and compare these results with the various color difference formulas.</li><li>Maybe there are smarter ways to compare the color differences between normal and colorblind vision than looking at the ratios?</li><li>Maybe there are smarter ways to decide how many “problematic” colors are enough to trigger the color blindness warning.</li><li>Clearly, it would help testing a larger set of charts and maps with this algorithm to measure its real performance</li></ul><p>As always I’m happy to hear what you think. Feel free to drop a comment below or send me an email at <a href=\"mailto:gregor@datawrapper.de\" target=\"_blank\" rel=\"noopener\">gregor@datawrapper.de</a>.</p><script type=\"text/javascript\">    makeMap();</script><style type=\"text/css\">    svg,canvas {top:0;}    button { font-size: 15px; padding: 5px 15px;  }    .colors { line-height: 0;  padding: 2px 0 0 2px; display: inline-block;}    .colors .color { box-sizing: border-box; border: 2px solid white; display: inline-block;        width: 16px; height: 16px; margin: -2px 0 0 -2px; }    .colors.large .color { width: 28px; height: 28px;  }    td .colors.large .color { width: 24px; height: 24px;  }    .colors.xlarge .color { width: 38px; height: 38px;  }    .colors.xlarge .color+.color{ border-left: 0 }    .all-colors-sorted { border-left: 2px solid white }    .all-colors-sorted .color{ border-left: 0 }    .content table.color-distance-matrix { cursor:pointer;overflow: hidden; z-index: 1; border-spacing: 0; border-collapse: separate; border: 1px solid white;}    .color-distance-matrix th,    .color-distance-matrix td { border:1px solid white; padding:0; color: #888;}    .color-distance-matrix th { width:16px; height:21px; }    .color-distance-matrix td { font-size: 11px; text-align: center;vertical-align: middle; position: relative;}    .color-distance-matrix tr:hover { background: #e0e0e0 }    .color-distance-matrix td:hover::after {        background-color: #e0e0e0; content: '\\00a0';height: 10000px;left: 0;position: absolute;        top: -5000px;width: 100%;z-index: -1;    }    .summary-ctrls label { display: inline-block; font-size: 14px; margin-right: 15px }    label input[type=range] { vertical-align: middle; margin: 0;}    .color-distance-matrix td:hover { background: #ccc; }    .color-distance-matrix td.relevant { color: #333; }    .color-distance-matrix td.strong { font-weight: bold; color:#fff;}    .color-distance-matrix td.lower { color: #d7d7d7; background: transparent!important;}</style>","contentSnippet":"Earlier this week we released a new feature at Datawrapper that checks colors used in charts or maps for problems with colorblind readers. If problematic colors are found, a warning sign is shown that leads to a colorblind simulation view that helps our users find better colors.\nThis blog post explains how the code works. Perhaps this can open a discussion for future improvement. I also hope that other tools will follow Darawrapper on this path towards more automated accessibility testing.\nTo see how the algorithm work we’ll look at an example map showing population growth in the US between 2000 and 2010, based on this map made by Matt Stiles in 2011:\n\nfunction makeMap() {    var base = \"/blog/interactives/usmap/\";    d3.loadData(base+'us-counties-10m.json', base+\"popchange.csv\", function(error, res) {        var sel = d3.select('.us-map').html(''),            pad = 10,            margin = {top:0,bottom:0,left:pad,right:pad},            totalWidth = sel.node().clientWidth,            totalHeight = totalWidth * 0.6;        var c = d3.conventions({sel, margin, totalWidth, totalHeight}),            [svg] = c.layers,            proj = d3.geoIdentity(),            path = d3.geoPath().projection(proj);        // read colors from inputs        var colors = [];        d3.selectAll('.map-gradient').each(function() {            colors.push(d3.select(this).prop('value'));        });        var scale = chroma            .scale(colors)            .domain([-50,-1,0,1,60]).out('hex');        var colors = d3.set();        // load data        if (error) throw error;        var [us, popchange] = res;        var popchange = d3.nest()            .key(d3.f('FIPS'))            .rollup(d3.f(0))            .object(popchange);        var nation = topojson.feature(us, us.objects.nation),            counties = topojson.feature(us, us.objects.counties).features;        proj.fitSize([totalWidth-pad*2, totalHeight], nation);        svg.append('g.counties')            .appendMany('path', counties)            .attr('d', path)            .style('fill', function(cty) {                var d = popchange[cty.id] || {},                    col = scale(+d.popchange||0);                colors.add(col);                return col;            });        svg.append(\"path\")            .st({fill:'none', stroke:'white'})            .attr(\"d\", path(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; })));        svg.append(\"path\")            .st({fill:'none',stroke:'black'})            .attr(\"d\", path(nation));        // run the rest of the demos        updateColors(colors);    });}function deltaE(col1, col2) {    return 0.5*(chroma.deltaE(col1,col2)+chroma.deltaE(col2,col1));}d3.selectAll('.map-gradient').on('change', makeMap);\nSo here’s what we’re going to do\n\nWe need to extract a representative color sample\nThen look for color-pairs that are distinguishable under normal vision and\ncheck if any of them turn indistinguishable in a color blindness simulated view\nFinally we need to decide whether or not to show a warning.\n\n# Extracting a representative color sample\nNow, to check if this map is colorblind-friendly or not, we need to look at the colors used in it. In some graphics there might be just a handful of colors, but since this is a continuous US county choropleth map, we have a lot of them (TK, to be exact).\n\nSince the next step will involve checking each combination of these colors, it would result in a lot of permutations (TK, to be exact). So in order to save some work we need to reduce the number of colors.\nMy first approach was to use random sampling. To illustrate this, let’s look at 20 random colors from the palette above:\n\nThis might look like a nice sample at first glance, but due to the is random sampling we might end up with more colors from either spectrum of the palette. Click the button below to try a few more samples.\nRepeat random sampling\nTo get around this problem I tried to find a more deterministic sampling method that gives us a representative collection of colors. Since color blindness affects hue perception I thought it made sense to get a good sample of the entire hue-spectrum. So I sorted all colors by hue…\n\n…and then pick 20 evenly spaced colors along this spectrum. Like taking a sample every 5th percentile. To deal with interpolation (in case a percentile falls exactly between two colors) I used the scale.colors() method in chroma.js.\n\n\n1\n\nvar sample = chroma.scale(sorted_colors).colors(20);\n\n\nAnd this is what the sample looks like:\n\nfunction updateColors(colors) {    d3.select('.all-colors').html('')        .appendMany('div.color', colors.values())        .st('background', d3.f());    var numColors = colors.size();    // update color counts    d3.select('.num-colors').text(numColors);    d3.select('.num-pairs').text(d3.format(',')((numColors * (numColors-1))/2));    // update random sample    randomSample();    hueSample();    d3.select('.resample-random').on('click', randomSample);    // random sampling    function randomSample() {        var sample = _.sample(colors.values(), 20);;        d3.select('.random-colors').html('')            .appendMany('div.color', sample)            .st('background', d3.f());    }    // hue sorted percentiles    function hueSample() {        var sorted = colors.values().sort(d3.ascendingKey(function(col) {            return chroma(col).get('lch.h') || 1000;        }));        // show all sorted colors        d3.select('.all-colors-sorted').html('')            .appendMany('div.color', sorted)            .attr('title', function(c) { return chroma(c).get('lch.h'); })            .st('background', d3.f());        // show sample        var sample = chroma.scale(sorted).colors(20);        d3.select('.hue-sample').html('')            .appendMany('div.color', sample)            .st('background', d3.f())            .attr('title', function(c) { return chroma(c).get('lch.h'); });        // compute distance matrix        colorDistanceMatrix('.cdm-normal', sample);        cbsimTable(sample);    }}\nWe could experiment with other sampling methods, but for now these look good enough, so let’s move on. Next we want to find out which of the resulting 190 color pairs are actually distinguishable from another. To do that we need to find a method to compute differences between colors.\n# How to compute color differences\nThere are a couple of ways to do this. For instance, a color can be represented as three-dimensional coordinates in a R-G-B color space, so the color difference can be defined as the Euclidean distance between the two points.\ndistRGB=(R2−R1)2+(G2−G1)2+(B2−B1)2dist_{RGB}=\\sqrt{(R_2-R_1)^{2} + (G_2-G_1)^{2} + (B_2-B_1)^{2}}dist​RGB​​=√​(R​2​​−R​1​​)​2​​+(G​2​​−G​1​​)​2​​+(B​2​​−B​1​​)​2​​​​​\nHowever, after playing around with RGB distances a bit I noticed a problem: Look at the yellow/green and pink/blue combinations below. From eyeballing the colors I had expected the distance between yellow and green to be smaller than the pink/blue combination.\n    \n\n\n vs \n    \n\n\nBut it turns out, in RGB the distance is exactly 255 in both cases. This makes sense mathematically, since it takes 255 “steps” from (255,255,0) to (0,255,0) as well as from (255,0,255) to (0,0,255). But it doesn’t make sense visually.\nOf course, the same Euclidean distances can be computed in any other color space, so perhaps a perceptual color space like Lab or Lch makes more sense. Sadly, that’s not the case.\n    \nRGBLchLabdeltaE\n    \n        \n        \n\n\n        25541.466.326.9    \n    \n        \n        \n\n\n        25540.058.034.7    \n\nIn Lch, like RGB, both color pairs are almost equally distant. In Lab, the distance between yellow and green is even larger (66.3) than pink/blue (58.0).\nSo I ended up using a more fancy algorithm called deltaE or CMC l:c. It’s based on the Lch color model, but appears to work better.\nOne minor problem with deltaE is that it’s not symmetrical, meaning that the difference between yellow and green differs slightly from the difference between green and yellow. To get around this problem I am using the mean of the distances in both direction:\ndist(c1,c2)=deltaE(c1,c2)+deltaE(c2,c1)2dist(c_{1},c_{2})=\\frac{deltaE(c_{1}, c_{2}) + deltaE(c_{2}, c_{1})}{2}dist(c​1​​,c​2​​)=​2​​deltaE(c​1​​,c​2​​)+deltaE(c​2​​,c​1​​)​​\nNow let’s move from the difference between two colors to the difference between all the colors!\n# Compute the color distance matrix\nTo do that we compute the color distance matrix. Which is a fancy word for a table with rows and columns for each of our sample colors, and the distance between each color combination shown in the table cells.\n\nfunction colorDistanceMatrix(cont, sample, baseline) {    var hm = chroma.scale(['#eee','#ddd', '#666']).domain(baseline ? [1,3,10] :[0,10,70]).out('hex');    var table = d3.select(cont).html('');    var tr = table.append('tr');    if (baseline) {        tr.append('td');        tr.append('td');        tr.appendMany('th.color', baseline).st('background', d3.f());        tr = table.append('tr');        tr.append('td');    }    tr.append('td');    tr.appendMany('th.color', sample).st('background', d3.f());    tr = table.appendMany('tr', sample);    if (baseline) {        tr.append('th.color').st('background', (d,i) => baseline[i]);    }    tr.append('th.color').st('background', d3.f());    tr.appendMany('td', function(a, ia) {            return sample.map(function(b, ib) {                var diff = deltaE(a,b);                return {                    a, ia, b, ib,                    diff: baseline ?                        // difference ratio                        (deltaE(baseline[ia],baseline[ib])/diff).toFixed(1)                        : diff.toFixed(0)                };            });        })        .style('background-color', d3.f('diff', hm))        .text(d3.f('diff'))        .classed('relevant', (d) => d.ib > d.ia && d.diff >= (baseline ? 2 : 8))        .classed('strong', (d) => d.diff >= (baseline ? 5 : 40))        .classed('lower', (d) => d.ib \nWe only need to look at the upper half of the matrix – the lower half is just an exact mirror. I highlighted all values above 45 so the combinations with the largest color differences pop out a bit more.\nNow we need to compute the same matrix with the colorblind-simulated versions of our colors.\n# Simulating color blindness\nColor blindness simulation is done by mapping colors from RGB to a reduced color space. It means that you have a function that gets one color as input and returns a new color.\nAfter googling around a bit I settled on a NPM package color-blind, which provides a fairly simple API:\n\n\n1\n2\n\nvar blinder = require('color-blind');\nblinder.protanopia('#42dead'); // result: \"#d1c4a0\"\n\n\nHere is our color sample mapped through three kinds of color blindness:\n\nfunction cbsimTable(sample) {    var table = d3.select('.simulated').html('');    var tr = table.appendMany('tr', ['normal','deuteranopia','protanopia','tritanopia']);    tr.append('td').append('b').text(d3.f());    var div = tr.append('td').append('div.colors.large');    div.appendMany('div.color', function(t) {            return t == 'normal' ? sample :                sample.map(function(c) { return blinder[t](c); })        })        .style('background', d3.f());    simColorMatrix(sample);    simColorRatioMatrix(sample);    summaryTable(sample);}\nNow we can just repeat the color difference matrix for the converted sample colors:\n\nYou can click through the buttons below to see the color difference matrix for each color blindness simulation:\n    normal    deuteranopia    protanopia    tritanopia\nfunction simColorMatrix(sample) {    var btns = d3.selectAll('.select-simulation button'),        typ = d3.select('.select-simulation button.selected').text();    btns.on('click.vis4', function() {        btns.classed('selected', false);        d3.select(this).classed('selected', true);        simColorMatrix(sample);    });    var colors = typ == 'normal' ? sample :        sample.map(function(c) { return blinder[typ](c); });    colorDistanceMatrix('.cdm-sim', colors);}\n# Computing difference ratios between normal and colorblind vision\nWe’re getting closer to the finish line! The only thing that’s left to do now is to compare the differences under normal vision with the differences under a color blindness simulation.\nOne way to do this is to look at the ratio between the two differences:\nratio(c1,c2)=distnormal(c1,c2)distcolorblind(c1,c2)ratio(c_1,c_2)=\\frac{dist_{normal}(c_1,c_2)}{dist_{colorblind}(c_1,c_2)}ratio(c​1​​,c​2​​)=​dist​colorblind​​(c​1​​,c​2​​)​​dist​normal​​(c​1​​,c​2​​)​​\nTo illustrate the ratio, let’s look at the notorious green/red color pair and compute the differences between them after applying different colorblindness simulations.\n\nfunction colorRatios(col1, col2) {    var table = d3.select('.color-ratios').html('');    var modes = ['normal','deuteranopia','protanopia','tritanopia'];    table.append('tr').appendMany('th', [''].concat(modes)).text(d3.f());    var dist_norm = deltaE(col1,col2);    var columns = modes.map(function(mode) {        var c1 = mode == 'normal' ? col1 : blinder[mode](col1);        var c2 = mode == 'normal' ? col2 : blinder[mode](col2);        var dist = deltaE(c1,c2);        return {            mode: mode,            colors: [c1,c2],            distance: dist,            ratio: dist_norm.toFixed()+'/'+dist.toFixed()+' = '+ (dist_norm / dist).toFixed(1)+''        };    });    // colors    var tr = table.append('tr');    tr.append('td').text('Colors');    tr.appendMany('td.color', columns)        .append('div.colors.xlarge')        .appendMany('div.color', (col) => col.colors)        .style('background', d3.f());    // distance    tr = table.append('tr');    tr.append('td').text('Distance');    tr.appendMany('td', columns)        .text((col) => col.distance.toFixed(0));    // ratio    tr = table.append('tr');    tr.append('td').text('Ratio').style('font-weight','bold');    tr.appendMany('td', columns)        .html((col) => col.ratio);}colorRatios('#54ae49', '#f06c62');\nA ratio of 17.3 means that a color pair is seventeen times more differentiable under normal vision than under this type of color blindness. The higher the ratio the more information is “lost” for a colorblind person. This is what we’ll use to decide what colors are ok or not.\nNow, to look at all the ratios at once, let’s make another matrix. The table looks just like the matrices we’ve seen before, except now the values in the cells show the ratio between the normal distance and the colorblind distance for each color pair.\n\n    normal    deuteranopia    protanopia    tritanopia\nfunction simColorRatioMatrix(sample) {    var btns = d3.selectAll('.select-simulation2 button'),        typ = d3.select('.select-simulation2 button.selected').text();    btns.on('click.vis4', function() {        btns.classed('selected', false);        d3.select(this).classed('selected', true);        simColorRatioMatrix(sample);    });    var colors = typ == 'normal' ? sample :        sample.map(function(c) { return blinder[typ](c); });    colorDistanceMatrix('.cdm-sim-ratios', colors, sample);}\nYou can use the buttons to cycle through the different simulations.\nAll that’s left to do now is to decide when to show a warning.\n# When to show a color warning\nOne criteria to check for I came up with is to check how many of the color pairs that were differentiable under normal vision turn into non-differentiable color pairs under colorblind vision. I also found that difference ratios above five signal a significant loss of information. So I ended up using a mix of both to decide when to trigger warnings.\nAs you can see in the table, it all depends highly on where I set the thresholds. You can tweak the sliders below to change them and see the results changing.\n\n    Difference threshold: \n    Ratio threshold: \n    Warning threshold: %\n\n    function summaryTable(colors) {        d3.selectAll('.summary-ctrls input').on('input', function() {            summaryTable(colors);        });        var ratio_thresh = +d3.select('.ratio-input').prop('value');        var diff_thresh = +d3.select('.diff-input').prop('value');        var warning_thresh = +d3.select('.warning-input').prop('value');        console.log('rrr', ratio_thresh, ratio_thresh.toFixed(1));        d3.select('.ratio-thresh').html(ratio_thresh.toFixed(1));        d3.select('.diff-thresh').html(diff_thresh.toFixed(1));        d3.select('.warning-thresh').html(warning_thresh.toFixed(1));        var table = d3.select('.summary').html('');        var modes = ['normal', 'deuteranopia','protanopia','tritanopia'];        table.append('tr').appendMany('th', [''].concat(modes)).text(d3.f());        var num_colors = colors.length,            num_perm = (colors.length*(colors.length-1))/2;        // var dist_ratio = (chroma.deltaE(col1,col2)+chroma.deltaE(col2,col1))*0.5;        var columns = modes.map(function(mode) {            // var c1 = mode == 'normal' ? col1 : blinder[mode](col1);            // var c2 = mode == 'normal' ? col2 : blinder[mode](col2);            // var dist = (chroma.deltaE(c1,c2)+chroma.deltaE(c2,c1))*0.5;            var diff_colors = 0,                cnt_ratio = 0,                cnt_sim_diff = 0,                max_ratio = 0,                sum_ratio = 0;            colors.forEach((col_a, i) => {                colors.forEach((col_b, j) => {                    if (j>i) {                        var dist_norm = deltaE(col_a, col_b);                        if (dist_norm >= diff_thresh) {                            diff_colors++;                            if (mode != 'normal') {                                var sim_a = blinder[mode](col_a),                                    sim_b = blinder[mode](col_b);                                var dist_sim = deltaE(sim_a, sim_b);                                if (dist_sim  max_ratio) max_ratio = ratio;                                if (ratio >= ratio_thresh) cnt_ratio++;                            }                        }                    }                });            });            var ratio_pct = 100*(cnt_ratio/diff_colors);            var diff_pct = 100*(cnt_sim_diff/diff_colors);            return {                mode: mode,                colors: mode == 'normal' ? num_colors : '-',                permutations: mode == 'normal' ? num_perm : '-',                differentiable: mode == 'normal' ? diff_colors : '-',                sim_not_diff: mode == 'normal' ? '' : cnt_sim_diff + ' ('+diff_pct.toFixed(1)+'%)',                ratio: mode == 'normal' ? '' : cnt_ratio+' ('+ratio_pct.toFixed(1)+'%)',                ratio_avg: mode == 'normal' ? '' : (sum_ratio / diff_colors).toFixed(1),                ratio_max: mode == 'normal' ? '' : (max_ratio).toFixed(1),                warning: mode== 'normal' ? '' : ratio_pct >= warning_thresh || diff_pct > warning_thresh ? 'WARNING' : 'ok'                // colors: [c1,c2],                // distance: dist,                // ratio: dist_norm / dist            };        });        // number of colors        var tr = table.append('tr');        tr.append('td').text('Colors');        tr.appendMany('td', columns).text(d3.f('colors'));        // number of color permutations        tr = table.append('tr');        tr.append('td').text('Color pairs');        tr.appendMany('td', columns).text(d3.f('permutations'));        // of those, differentiable        tr = table.append('tr');        tr.append('td').html('Differentiable color pairs');        tr.appendMany('td', columns).text(d3.f('differentiable'));        // hr        // tr = table.append('tr');        // tr.append('td').attr('colspan', 4)        //     .st({textAlign:'center', color: '#999'})        //     .text('of those...');        // non differentiable        tr = table.append('tr');        tr.append('td').html('..that turn into non-differentiable\npairs under colorblind simulation');        tr.appendMany('td', columns).text(d3.f('sim_not_diff'));        // of those, differentiable        // tr = table.append('tr');        // tr.append('td').text('Avg. ratio');        // tr.appendMany('td', columns).text(d3.f('ratio_avg'));        // // of those, differentiable        // tr = table.append('tr');        // tr.append('td').text('Max. ratio');        // tr.appendMany('td', columns).text(d3.f('ratio_max'));        // of those, differentiable        tr = table.append('tr');        tr.append('td').text('Ratio > '+(ratio_thresh.toFixed(1)));        tr.appendMany('td', columns).text(d3.f('ratio'));        // of those, differentiable        tr = table.append('tr');        tr.append('td').text('Result');        tr.appendMany('td', columns).html(d3.f('warning'));        // of those, differentiable    }\nFeel free to scroll back to the top and try out different colors in the map. All the examples and matrices in this post will change accordingly. Let me know if you find bugs along the way.\n# Some ideas for future improvements\nThis algorithm was hacked together in a few days, so obviously there are possible improvements to be made. Here are a few ideas that might be worth exploring:\n\nInstead of the hue-percentiles we could try different methods to find the most “representative” colors, such as k-means clustering.\nOne could look out for different color difference metrics, ideally by having (non-colorblind) people “guess” color differences and compare these results with the various color difference formulas.\nMaybe there are smarter ways to compare the color differences between normal and colorblind vision than looking at the ratios?\nMaybe there are smarter ways to decide how many “problematic” colors are enough to trigger the color blindness warning.\nClearly, it would help testing a larger set of charts and maps with this algorithm to measure its real performance\n\nAs always I’m happy to hear what you think. Feel free to drop a comment below or send me an email at gregor@datawrapper.de.\n    makeMap();    svg,canvas {top:0;}    button { font-size: 15px; padding: 5px 15px;  }    .colors { line-height: 0;  padding: 2px 0 0 2px; display: inline-block;}    .colors .color { box-sizing: border-box; border: 2px solid white; display: inline-block;        width: 16px; height: 16px; margin: -2px 0 0 -2px; }    .colors.large .color { width: 28px; height: 28px;  }    td .colors.large .color { width: 24px; height: 24px;  }    .colors.xlarge .color { width: 38px; height: 38px;  }    .colors.xlarge .color+.color{ border-left: 0 }    .all-colors-sorted { border-left: 2px solid white }    .all-colors-sorted .color{ border-left: 0 }    .content table.color-distance-matrix { cursor:pointer;overflow: hidden; z-index: 1; border-spacing: 0; border-collapse: separate; border: 1px solid white;}    .color-distance-matrix th,    .color-distance-matrix td { border:1px solid white; padding:0; color: #888;}    .color-distance-matrix th { width:16px; height:21px; }    .color-distance-matrix td { font-size: 11px; text-align: center;vertical-align: middle; position: relative;}    .color-distance-matrix tr:hover { background: #e0e0e0 }    .color-distance-matrix td:hover::after {        background-color: #e0e0e0; content: '\\00a0';height: 10000px;left: 0;position: absolute;        top: -5000px;width: 100%;z-index: -1;    }    .summary-ctrls label { display: inline-block; font-size: 14px; margin-right: 15px }    label input[type=range] { vertical-align: middle; margin: 0;}    .color-distance-matrix td:hover { background: #ccc; }    .color-distance-matrix td.relevant { color: #333; }    .color-distance-matrix td.strong { font-weight: bold; color:#fff;}    .color-distance-matrix td.lower { color: #d7d7d7; background: transparent!important;}","summary":"<p>Earlier this week we released a new feature at Datawrapper that <a href=\"https://blog.datawrapper.de/colorblind-check/\" target=\"_blank\" r","id":"https://vis4.net/blog/2018/02/automate-colorblind-checking/","isoDate":"2018-02-08T14:09:30.000Z","blogTitle":"vis4.net"}},"__N_SSG":true}