{"pageProps":{"post":{"title":"Making HTML tables in D3 doesn't need to be a pain","link":"https://vis4.net/blog/2015/04/making-html-tables-in-d3-doesnt-need-to-be-a-pain/","pubDate":"2015-04-24T16:48:27.000Z","content":"<p><strong>tl;dr:</strong> Here’s a <a href=\"https://jsfiddle.net/vis4/Lby2eq1j/\" target=\"_blank\" rel=\"noopener\">demo with source code</a>. D3 is nice, but it also makes some simple things look really complicated. One of them is making a simple HTML table. Let’s say you got a simple dataset, stored as array of objects just as you would get from d3.csv:</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> movies = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"The Godfather\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1972</span>, <span class=\"attr\">length</span>: <span class=\"number\">175</span>,</span><br><span class=\"line\">      budget: <span class=\"number\">6000000</span>, <span class=\"attr\">rating</span>: <span class=\"number\">9.1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"The Shawshank Redemption\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1994</span>,</span><br><span class=\"line\">      length: <span class=\"number\">142</span>, <span class=\"attr\">budget</span>: <span class=\"number\">25000000</span>, <span class=\"attr\">rating</span>: <span class=\"number\">9.1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">\"The Lord of the Rings 3\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">2003</span>,</span><br><span class=\"line\">      length: <span class=\"number\">251</span>, <span class=\"attr\">budget</span>: <span class=\"number\">94000000</span>, <span class=\"attr\">rating</span>: <span class=\"number\">9</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>To render this in a table you would typically start writing some code like this:</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> table = d3.select(<span class=\"string\">'body'</span>).append(<span class=\"string\">'table'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tr = table.selectAll(<span class=\"string\">'tr'</span>)</span><br><span class=\"line\">    .data(movies).enter()</span><br><span class=\"line\">    .append(<span class=\"string\">'tr'</span>);</span><br></pre></td></tr></table></figure><p>Now you got a selection of table row elements, each of which is bound to one movie. But how do you make the table columns? What I did a lot was this:</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tr.append(<span class=\"string\">'td'</span>).html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123; <span class=\"keyword\">return</span> m.title; &#125;);</span><br><span class=\"line\">tr.append(<span class=\"string\">'td'</span>).html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123; <span class=\"keyword\">return</span> m.year; &#125;);</span><br><span class=\"line\">tr.append(<span class=\"string\">'td'</span>).html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123; <span class=\"keyword\">return</span> m.budget; &#125;);</span><br></pre></td></tr></table></figure><p>That looks easy at first, but of course you want more stuff, like a class name depending on the column etc. So the above code turns into this:</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tr.append(<span class=\"string\">'td'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'class'</span>, <span class=\"string\">'title'</span>)</span><br><span class=\"line\">    .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123; <span class=\"keyword\">return</span> m.title; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">tr.append(<span class=\"string\">'td'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'class'</span>, <span class=\"string\">'center'</span>)</span><br><span class=\"line\">    .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123; <span class=\"keyword\">return</span> m.year; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">tr.append(<span class=\"string\">'td'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'class'</span>, <span class=\"string\">'num'</span>)</span><br><span class=\"line\">    .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123; <span class=\"keyword\">return</span> m.budget; &#125;);</span><br></pre></td></tr></table></figure><p>Also you might need a table header, so essentially you copy this entire block to create the <strong>th</strong> elements. Better make sure you keep them in the same order if you decide to change your code later. To make it short, this is an entire mess. It’s not the right way to do a table.</p><h2 id=\"html-tables-in-d3-the-right-way\"><a class=\"anchor\" href=\"#html-tables-in-d3-the-right-way\"><span class=\"header-anchor\">#</span></a> HTML tables in D3, the right way</h2><p>To make tables fun again, we simply define a set of columns as an array of objects. Note that some of the attributes of the column objects are functions, these will later be evaluated against the row objects to get the values for each cell.</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> columns = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Movie title'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'title'</span>,</span><br><span class=\"line\">      html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">row</span>) </span>&#123; <span class=\"keyword\">return</span> r.title; &#125; &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Year'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'center'</span>,</span><br><span class=\"line\">      html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">row</span>) </span>&#123; <span class=\"keyword\">return</span> r.year; &#125; &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Length'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'center'</span>,</span><br><span class=\"line\">      html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">row</span>) </span>&#123; <span class=\"keyword\">return</span> r.length; &#125; &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Budget'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'num'</span>,</span><br><span class=\"line\">      html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">row</span>) </span>&#123; <span class=\"keyword\">return</span> r.budget; &#125; &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Rating'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'num'</span>,</span><br><span class=\"line\">      html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">row</span>) </span>&#123; <span class=\"keyword\">return</span> r.rating; &#125; &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>Actually, since I really don’t like all these verbose getter functions here, let’s instead use the nice <strong>ƒ</strong> helper function from the <a href=\"https://github.com/gka/d3-jetpack\" target=\"_blank\" rel=\"noopener\">d3-jetpack</a> and compress the code a bit:</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> columns = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Movie title'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'title'</span>, <span class=\"attr\">html</span>: ƒ(<span class=\"string\">'title'</span>) &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Year'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'center'</span>, <span class=\"attr\">html</span>: ƒ(<span class=\"string\">'year'</span>) &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Length'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'center'</span>, <span class=\"attr\">html</span>: ƒ(<span class=\"string\">'length'</span>) &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Budget'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'num'</span>, <span class=\"attr\">html</span>: ƒ(<span class=\"string\">'budget'</span>) &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">head</span>: <span class=\"string\">'Rating'</span>, <span class=\"attr\">cl</span>: <span class=\"string\">'num'</span>, <span class=\"attr\">html</span>: ƒ(<span class=\"string\">'rating'</span>) &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>We can now use these column objects in a data join to create the table header. Much more fun than duplicating all the code for each column.</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table.append(<span class=\"string\">'thead'</span>).append(<span class=\"string\">'tr'</span>)</span><br><span class=\"line\">   .selectAll(<span class=\"string\">'th'</span>)</span><br><span class=\"line\">   .data(columns).enter()</span><br><span class=\"line\">   .append(<span class=\"string\">'th'</span>)</span><br><span class=\"line\">   .attr(<span class=\"string\">'class'</span>, ƒ(<span class=\"string\">'cl'</span>))</span><br><span class=\"line\">   .text(ƒ(<span class=\"string\">'head'</span>));</span><br></pre></td></tr></table></figure><p>Finally, we can do the same with the table body. But if we would just pass the column objects here, we would lose the information of the row. So that’s why we evaluate all the function properties of the column objects against the row objects. This way we convert the list of column objects into a list of cell objects to use in the second data join:</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table.append(<span class=\"string\">'tbody'</span>)</span><br><span class=\"line\">   .selectAll(<span class=\"string\">'tr'</span>)</span><br><span class=\"line\">   .data(movies).enter()</span><br><span class=\"line\">   .append(<span class=\"string\">'tr'</span>)</span><br><span class=\"line\">   .selectAll(<span class=\"string\">'td'</span>)</span><br><span class=\"line\">   .data(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">row, i</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// evaluate column objects against the current row</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> columns.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> cell = &#123;&#125;;</span><br><span class=\"line\">           d3.keys(c).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k</span>) </span>&#123;</span><br><span class=\"line\">               cell[k] = <span class=\"keyword\">typeof</span> c[k] == <span class=\"string\">'function'</span> ? c[k](row,i) : c[k];</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;).enter()</span><br><span class=\"line\">   .append(<span class=\"string\">'td'</span>)</span><br><span class=\"line\">   .html(ƒ(<span class=\"string\">'html'</span>))</span><br><span class=\"line\">   .attr(<span class=\"string\">'class'</span>, ƒ(<span class=\"string\">'cl'</span>));</span><br></pre></td></tr></table></figure><p>And that’s it. Again, here’s a link to the <a href=\"http://bl.ocks.org/gka/17ee676dc59aa752b4e6\" target=\"_blank\" rel=\"noopener\">demo with full source code</a>.</p><h1 id=\"comments\"><a class=\"anchor\" href=\"#comments\"><span class=\"header-anchor\">#</span></a> Comments</h1><p>Dheepan (Jul 21, 2015)</p><blockquote><p>Hi Gregor,</p><p>How do I access the values inside the rows to use in functions? In my case I want to use the values in my class td.num to determine the background fill based on variable sentcolor.</p><p>My return function for .style selected on (“td.num”)  can only access the index number but not the actual value.</p><p>See example here, <a href=\"http://jsfiddle.net/dheepanr/p6uovdL7/2/\" rel=\"noopener\" target=\"_blank\">link</a></p></blockquote><p>Nagarajan Chinnasamy (Apr 29, 2015)</p><blockquote><p>In case if you need an SVG based Grid (Table with adjustable columns, sorting etc.), you can look at:  <a href=\"https://github.com/PMSI-AlignAlytics/scrollgrid\" target=\"_blank\" rel=\"noopener\">https://github.com/PMSI-AlignAlytics/scrollgrid</a></p><p>This is based on D3.</p></blockquote><p>keith (May 10, 2015)</p><blockquote><p>including datatables.js is very simple to add to your example and makes for nice user enabled sorting/filtering.</p><p>i was working on a project where the data drawn by d3 was to be controlled by datatables but never did implement that part of it. i think that would be pretty slick.</p></blockquote><p>Will Morris (Apr 24, 2015)</p><blockquote><p>This is a nice solution. However, for an HTML table, why not use something like handlebars.js? Just curious about your experience with one vs the other.</p></blockquote><p>Gregor Aisch (Apr 24, 2015)</p><blockquote><p>In the context where I am using this code, D3 is part of the default project setup, but handlebars isn’t. We do a lot of graphics so it kind of makes sense to stay in one framework…</p></blockquote><p>Pat (Jul 20, 2015)</p><blockquote><p>The array-of-columns is a very cool approach.</p><p>It seems like the column definitions would be a good place to put a sorting function, which would enable a simple version of the kinds of sorting the other commenters are suggesting.</p></blockquote>","contentSnippet":"tl;dr: Here’s a demo with source code. D3 is nice, but it also makes some simple things look really complicated. One of them is making a simple HTML table. Let’s say you got a simple dataset, stored as array of objects just as you would get from d3.csv:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nvar movies = [\n    { title: \"The Godfather\", year: 1972, length: 175,\n      budget: 6000000, rating: 9.1 },\n    { title: \"The Shawshank Redemption\", year: 1994,\n      length: 142, budget: 25000000, rating: 9.1 },\n    { title: \"The Lord of the Rings 3\", year: 2003,\n      length: 251, budget: 94000000, rating: 9 },\n    /* ... */\n];\n\n\nTo render this in a table you would typically start writing some code like this:\n\n\n1\n2\n3\n4\n5\n\nvar table = d3.select('body').append('table');\n\nvar tr = table.selectAll('tr')\n    .data(movies).enter()\n    .append('tr');\n\n\nNow you got a selection of table row elements, each of which is bound to one movie. But how do you make the table columns? What I did a lot was this:\n\n\n1\n2\n3\n\ntr.append('td').html(function(m) { return m.title; });\ntr.append('td').html(function(m) { return m.year; });\ntr.append('td').html(function(m) { return m.budget; });\n\n\nThat looks easy at first, but of course you want more stuff, like a class name depending on the column etc. So the above code turns into this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\ntr.append('td')\n    .attr('class', 'title')\n    .html(function(m) { return m.title; });\n\ntr.append('td')\n    .attr('class', 'center')\n    .html(function(m) { return m.year; });\n\ntr.append('td')\n    .attr('class', 'num')\n    .html(function(m) { return m.budget; });\n\n\nAlso you might need a table header, so essentially you copy this entire block to create the th elements. Better make sure you keep them in the same order if you decide to change your code later. To make it short, this is an entire mess. It’s not the right way to do a table.\n# HTML tables in D3, the right way\nTo make tables fun again, we simply define a set of columns as an array of objects. Note that some of the attributes of the column objects are functions, these will later be evaluated against the row objects to get the values for each cell.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\nvar columns = [\n    { head: 'Movie title', cl: 'title',\n      html: function(row) { return r.title; } },\n    { head: 'Year', cl: 'center',\n      html: function(row) { return r.year; } },\n    { head: 'Length', cl: 'center',\n      html: function(row) { return r.length; } },\n    { head: 'Budget', cl: 'num',\n      html: function(row) { return r.budget; } },\n    { head: 'Rating', cl: 'num',\n      html: function(row) { return r.rating; } }\n];\n\n\nActually, since I really don’t like all these verbose getter functions here, let’s instead use the nice ƒ helper function from the d3-jetpack and compress the code a bit:\n\n\n1\n2\n3\n4\n5\n6\n7\n\nvar columns = [\n    { head: 'Movie title', cl: 'title', html: ƒ('title') },\n    { head: 'Year', cl: 'center', html: ƒ('year') },\n    { head: 'Length', cl: 'center', html: ƒ('length') },\n    { head: 'Budget', cl: 'num', html: ƒ('budget') },\n    { head: 'Rating', cl: 'num', html: ƒ('rating') }\n];\n\n\nWe can now use these column objects in a data join to create the table header. Much more fun than duplicating all the code for each column.\n\n\n1\n2\n3\n4\n5\n6\n\ntable.append('thead').append('tr')\n   .selectAll('th')\n   .data(columns).enter()\n   .append('th')\n   .attr('class', ƒ('cl'))\n   .text(ƒ('head'));\n\n\nFinally, we can do the same with the table body. But if we would just pass the column objects here, we would lose the information of the row. So that’s why we evaluate all the function properties of the column objects against the row objects. This way we convert the list of column objects into a list of cell objects to use in the second data join:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\ntable.append('tbody')\n   .selectAll('tr')\n   .data(movies).enter()\n   .append('tr')\n   .selectAll('td')\n   .data(function(row, i) {\n       // evaluate column objects against the current row\n       return columns.map(function(c) {\n           var cell = {};\n           d3.keys(c).forEach(function(k) {\n               cell[k] = typeof c[k] == 'function' ? c[k](row,i) : c[k];\n           });\n           return cell;\n       });\n   }).enter()\n   .append('td')\n   .html(ƒ('html'))\n   .attr('class', ƒ('cl'));\n\n\nAnd that’s it. Again, here’s a link to the demo with full source code.\n# Comments\nDheepan (Jul 21, 2015)\n\nHi Gregor,\nHow do I access the values inside the rows to use in functions? In my case I want to use the values in my class td.num to determine the background fill based on variable sentcolor.\nMy return function for .style selected on (“td.num”)  can only access the index number but not the actual value.\nSee example here, link\n\nNagarajan Chinnasamy (Apr 29, 2015)\n\nIn case if you need an SVG based Grid (Table with adjustable columns, sorting etc.), you can look at:  https://github.com/PMSI-AlignAlytics/scrollgrid\nThis is based on D3.\n\nkeith (May 10, 2015)\n\nincluding datatables.js is very simple to add to your example and makes for nice user enabled sorting/filtering.\ni was working on a project where the data drawn by d3 was to be controlled by datatables but never did implement that part of it. i think that would be pretty slick.\n\nWill Morris (Apr 24, 2015)\n\nThis is a nice solution. However, for an HTML table, why not use something like handlebars.js? Just curious about your experience with one vs the other.\n\nGregor Aisch (Apr 24, 2015)\n\nIn the context where I am using this code, D3 is part of the default project setup, but handlebars isn’t. We do a lot of graphics so it kind of makes sense to stay in one framework…\n\nPat (Jul 20, 2015)\n\nThe array-of-columns is a very cool approach.\nIt seems like the column definitions would be a good place to put a sorting function, which would enable a simple version of the kinds of sorting the other commenters are suggesting.","summary":"<p><strong>tl;dr:</strong> Here’s a <a href=\"https://jsfiddle.net/vis4/Lby2eq1j/\" target=\"_blank\" rel=\"noopener\">demo with source code</a>. ","id":"https://vis4.net/blog/2015/04/making-html-tables-in-d3-doesnt-need-to-be-a-pain/","isoDate":"2015-04-24T16:48:27.000Z","blogTitle":"vis4.net"}},"__N_SSG":true}